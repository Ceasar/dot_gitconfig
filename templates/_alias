[alias]
    # Use template "!sh -c 'git command $0'" for positional arguments


    # Staging
    # =======

    # Add file contents to the index verbosely
    stage = add -v

    # Remove file contents from the index
    unstage = reset HEAD

    # Update file in working tree to match version in the index
    restore = checkout HEAD --

    # Update files in the working tree to match the version in the specified tree
    resume = checkout


    # Commits
    # =======

    # Undo the previous commit, and leave the changes in the index
    # To undo _this_, check the reflog then git reset --hard the commit
    # See: http://stackoverflow.com/questions/5473/undoing-a-git-reset-hard-head1
    uncommit = reset --soft HEAD^

    # Amend the last commit
    recommit = commit --amend


    # History
    # =======

    # Squash multiple commits into one
    # Must provide argument in the form HEAD~$1 where $1 is the
    # number of commits to squash together (including the one you
    # wish to keep). In other words, if you wish to squash the last
    # commit into the one before it, use 'git squash HEAD~2'.
    #
    # NOTE: Do not squash commits that you've shared with other.
    # Squashing changes history and will cause trouble when merging.
    squash = rebase -i

    # Remotes
    # =======

    # Sync with master
    # Rebase the current branch on top of upstream after fetching.
    # Show diff stat at the end.
    sync = pull --stat --rebase origin master

    # Sync with master and push to master
    # Rebase the current branch on top of upstream after fetching.
    # Show diff stat at the end.
    syncup = !sh -c 'git sync && git push origin master'

    # Show remotes
    remotes = remote -v

    # Delete a remote
    rmremote = remote rm

    # Delete a remote branch
    rmremotebranch = !sh -c 'git push origin :$0'


    # Merges
    # ------

    # Abort a merge
    abort = merge --abort

    # Show all merged branches
    merged = branch --merged

    # Show all unmerged branches
    unmerged = branch --no-merged


    # Stashes
    # =======

    # Show all stashes
    stashes = stash list

    # unstash [-q|--quiet] [<stash>]
    # `apply` a stash and then `drop` it immediately from the stack.
    # Additionally we use the index option to restage any files that might
    # have been staged
    # When no <stash> is given, stash@{0} is assumed, otherwise <stash>
    # must be a reference of the form stash@{<revision>}.
    unstash = stash pop --index


    # History
    # =======

    # Show the last commit
    showlast = log -1 HEAD --stat --abbrev-commit

    # Show any changes from the last commit
    difflast = diff HEAD^

    # Pretty, high/density history
    # %Ccolor sets a color
    # %s - subject of a commit
    # %ad - date of a commit. Respects date option
    # %an - author of a commit
    # %h - abbreviated hash
    hist = log --pretty=format:\"%Cgreen%s %Cred%ad %Cblue[%an] %Creset%h\" --graph --date=relative

    # Search historical commits for a keyword
    greplog = !sh -c 'git log --grep=$0'

    # Search historical diffs for a keyword
    grepdiff = !sh -c 'git log -S$0 --stat'

    # Search historical diffs for a keyword
    pickax = !sh -c 'git log -S$0 --stat'

    # Find all matching filenames in the project
    find = !sh -c 'git ls-files | grep -i $0'

    # Find a string in the code base
    # -I non-binary
    # -i non-case-sensitive
    f = grep -Ii


    # Branching
    # =========

    # Show all branches (including remotes)
    branches = branch -a

    # Rename a branch
    renameb = branch -m

    # Delete a branch
    rmbranch = branch -d

    # Reset <branchname>, $0, to <commit>, $1, if <branchname> exists already.
    # Without -f git branch refuses to change an existing branch.
    movebranch = git branch -f

    # Bend current branch at $0, moving all commits after $0 onto branch $1
    # * Create branch $1 (but do not switch to it)
    # * Point the current branch at $0 (keeping local index and working
    #   directory intact)
    bend = !sh -c 'git branch $1 && git reset --soft $0'


    # Tags
    # ====

    # Show all tags
    tags = git tags

    # Convenience
    # ===========
    
    # Create a branch and switch to it
    diverge = checkout -b

    # Switch to master
    master = checkout master
